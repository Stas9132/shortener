name: user tests # название workflows
# если вы хотите настроить автоматическое применение workflows в зависимости от условий,
# то используйте ключевое слово on
on:
  pull_request: # здесь говорите, что workflows должен запускаться для любого события внутри PR (пуш, тег и другие)
  push:
    branches: # здесь говорите, что хотите применять workflows и для пушей в main-ветку
      - iter1
      - iter2
      - iter3
      - iter4
# каждый workflows представляет собой набор джоб,
# которые выполняются последовательно или параллельно,
# для каждой джобы можно задать докер-образ, в котором будут выполняться шаги (steps),
# и ОС, в которой будет запущен контейнер
jobs:
  statictest: # описываете джобу statictest
    runs-on: ubuntu-latest # говорите, что джоба должна выполняться на машине с убунтой (предоставляется гитхабом)
    container: golang:latest # запускаете в ней контейнер докер-образа golang:1.20
    steps: # последовательно выполняемые шаги
      - name: Checkout code
        # GitHub Actions позволяет самим описывать команды линукса внутри шага
        # или использовать заготовленные шаги, как здесь
        uses: actions/checkout@v2
      - name: Download statictest binary
        # или здесь
        uses: robinraju/release-downloader@v1
        with:
          # для заготовленных шагов иногда требуется указать параметры, как здесь
          repository: Yandex-Practicum/go-autotests
          latest: true
          fileName: statictest
          out-file-path: .tools
      - name: Setup autotest binary
        # тут описываете произвольный набор команд
        run: |
          chmod -R +x $GITHUB_WORKSPACE/.tools/statictest
          mv $GITHUB_WORKSPACE/.tools/statictest /usr/local/bin/statictest
      - name: Run statictest
        run: |
          go vet -vettool=$(which statictest) ./...
  shortenertest: # описываете джобу shortenertest
    runs-on: ubuntu-latest # говорите, что джоба должна выполняться на машине с убунтой (предоставляется гитхабом)
    container: golang:latest # запускаете в ней контейнер докер-образа golang:1.20
    steps: # последовательно выполняемые шаги
      - name: Checkout code
        # GitHub Actions позволяет самим описывать команды линукса внутри шага
        # или использовать заготовленные шаги, как здесь
        uses: actions/checkout@v2
      - name: Download statictest binary
        # или здесь
        uses: robinraju/release-downloader@v1
        with:
          # для заготовленных шагов иногда требуется указать параметры, как здесь
          repository: Yandex-Practicum/go-autotests
          latest: true
          fileName: shortenertest
          out-file-path: .tools
      - name: Setup autotest binary
        # тут описываете произвольный набор команд
        run: |
          chmod -R +x $GITHUB_WORKSPACE/.tools/shortenertest
          mv $GITHUB_WORKSPACE/.tools/shortenertest /usr/local/bin/shortenertest
      - name: Build shortener
        run: |
          go build -o shortener cmd/shortener/main.go
      - name: Run shortenertest
        run: |
          shortenertest -test.v -test.run=^TestIteration[1-4]$ -binary-path=./shortener -source-path=.
